"use strict";

var legacyRules = {};

function ruleTransform(rule) {
  var source = rule.source;
  var type;
  var newRule;
  if (rule.source.indexOf("'") !== -1) {
    // specific rule that change for special strings, like remote=true, attention etc.
    type = "callexpression rule that contains a string";
    var funcName = rule.source.match(/(\w+)\(.*\)/)[1];
    var lit = rule.source.match(/(\'.*\')/)[1];
    newRule = (function(context) {
      return {
        "CallExpression": function() {
          for (var i=0; i < node.arguments.length; i++) {
            var arg = node.arguments[i];
            if (arg.type == "Literal" && (arg.value == lit)) {
              context.report(node, "The function"+ funcName +" with parameter "+lit+" can be unsafe");
            }
          }
        }
      }
    });
  } else if (rule.source.indexOf("=") !== -1) {
    if (rule.source.indexOf(".") !== -1) {
      // for property assignments
      type = "property assignment";
      var propName = rule.source.match(/.*\.(\w+)\s*=/)[1];
      newRule = (function (context) {
        return {
          "AssignmentExpression:exit": function (node) {
            if ("property" in node.left) { // member assignment, so yeah.
              if (['+', '+='].indexOf(node.operator) !== -1) {
                if (node.left.property.name === propName) {
                  if (!allowedExpression(node.right, node.parent)) {
                    context.report(node, "Assignment to "+propName+' can be unsafe');
                  }
                }
              }
            }
          }
        };
      });
    } else {
    /* outright assignments. only 2 are interesting:
        -> onmessage=…  and location…
        (XXX location is missing from the core ruleset, we just have .href)
     */
      type = "direct assignment";
      var propName = rule.source.match(/.*\.(\w+)\s*=/)
      newRule = (function (context) {
        var assigned = rule.source.match(/(\w+)\s*=/)[1];
        return {
          "AssignmentExpression:exit": function (node) {
            if (node.left == assigned) {
              context.report(node, "Assignment to "+assigned+' can be unsafe');
            }
          }
        };
      });
    }
  } else if (rule.source.indexOf("()") !== -1) {
    if (rule.source.indexOf("new ") === -1) {
      // call rule:
      type = "func call";
      var funcName = rule.source.match(/(\w+)\(\)/)[1];
      newRule = (function (context) {
        return {
          "CallExpression": function (node) {
            if (node.callee.name == funcName) {
              context.report(node, "The function"+ funcName +" can be unsafe");
            }
          }
        };
      });
    } else { // constructor rule
      /*TODO this is awfully similar to the callExpression thing
        (except for, well, the expression being checked on), maybe
        we should merge this somehow?
       */
      type = "new expression";
      newRule = (function (context) {
        var funcName = rule.source.match(/(\w+)\(\)/)[1];
        return {
          "NewExpression": function (node) {
            if (node.callee.name == funcName) {
              context.report(node, "The "+ funcName +" constructor can be unsafe");
            }
            }
          };
        });
      }
    } else if (rule.source.indexOf("mozSystem") !== -1) {
    type = "interesting object (mozsystem)";
    newRule = (function(context) {
      return {
        "ObjectExpression": function (node) {
          for (var i=0; i < node.properties.length; i++) {
            var prop = node.properties[i];
            if (prop.key.type == "Identifier") {
              if (prop.key.name == "mozSystem") {

              }
            } else if (prop.key.type == "Literal") {
              if (prop.key.value == "mozSystem") {
                context.report(node, "mozSystem can be unsafe");
              }
            }
          }
        }
      }
    });
  } else if (rule.source.indexOf(".") !== -1) {
    type = "member statement";
    // member
      var property = rule.source.match(/\.(\w+);?$/)[1];
    newRule = (function(context) {
     return {
       "MemberExpression": function(node) {
          if (node.property.name == property) {
            context.report(node, property+" can be unsafe.");

          }
       }
     }
   })
  } else {
    type = "identifier";
    newRule = (function(context) {
      return {
        "Identifier": function(node) {
          if (node.name == rule.source) {
            context.report(node, property+" can be unsafe.");
          }
        }
      }
    })
  }
  console.log("identified " + rule.name + " (`"+rule.source+"`) as a "+type+' rule');
  return newRule;
}


var scanJsRules = require("./lib/rules/scanjs-rules.json");
for (var i=0; i < scanJsRules.length; i++) {
  var rule = scanJsRules[i];
  var eslintRule = ruleTransform(rule);
  legacyRules[rule.name] = eslintRule;
  console.log(eslintRule.toString());
 }
module.exports = {
    rules: legacyRules
};
