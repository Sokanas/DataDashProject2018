var testandcode = ({'../tests/rules/call_eval.js':"/**\n * @fileoverview Test for call_eval rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_eval\", {\n    valid: [\n        { code: \"eval\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.eval('jsCode'+usercontrolledVal )\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/new_Function.js':"/**\n * @fileoverview Test for new_Function rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/new_Function\", {\n    valid: [\n        { code: \"Function\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"new Function('jsCode'+usercontrolledVal ) \",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n        {\n            code: \" new Function('arg','arg2','jsCode'+usercontrolledVal )\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_Function.js':"/**\n * @fileoverview Test for call_Function rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_Function\", {\n    valid: [\n        { code: \"Function\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"Function('jsCode'+usercontrolledVal ) \",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n        {\n            code: \" Function('arg','arg2','jsCode'+usercontrolledVal )\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_setTimeout.js':"/**\n * @fileoverview Test for call_setTimeout rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_setTimeout\", {\n    valid: [\n        { code: \"setTimeout\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"global.setTimeout('jsCode'+usercontrolledVal ,timeMs)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_setInterval.js':"/**\n * @fileoverview Test for call_setInterval rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_setInterval\", {\n    valid: [\n        { code: \"setInterval\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"global.setInterval('jsCode'+usercontrolledVal ,timMs)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_setImmediate.js':"/**\n * @fileoverview Test for call_setImmediate rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_setImmediate\", {\n    valid: [\n        { code: \"setImmediate\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"global.setImmediate('jsCode'+usercontrolledVal )\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_execScript.js':"/**\n * @fileoverview Test for call_execScript rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_execScript\", {\n    valid: [\n        { code: \"execSript\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"execScript('jsCode'+usercontrolledVal ,'JScript')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_generateCRMFRequest.js':"/**\n * @fileoverview Test for call_generateCRMFRequest rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_generateCRMFRequest\", {\n    valid: [\n        { code: \"crypto.generateCRMFRequest\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"crypto.generateCRMFRequest('CN=0',0,0,null,'jsCode'+usercontrolledVal,384,null,'rsa-dual-use')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_write.js':"/**\n * @fileoverview Test for call_write rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_write\", {\n    valid: [\n        { code: \"document.write\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"document.write('test')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_writeln.js':"/**\n * @fileoverview Test for call_writeln rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_writeln\", {\n    valid: [\n        { code: \"document.writeln\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"document.writeln('test')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_innerHTML.js':"/**\n * @fileoverview Test for assign_to_innerHTML rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_innerHTML\", {\n    valid: [\n        { code: \"a.innerHTML='foo'+'bar'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"a.innerHTML=foo\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n        {\n            code: \"a.innerHTML=foo+'bar'\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_outerHTML.js':"/**\n * @fileoverview Test for assign_to_outerHTML rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_outerHTML\", {\n    valid: [\n        { code: \"outerHTML\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"a.outerHTML=foo\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_insertAdjacentHTML.js':"/**\n * @fileoverview Test for call_insertAdjacentHTML rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_insertAdjacentHTML\", {\n    valid: [\n        { code: \"insertAdjacentHTML\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"insertAdjacentHTML(foo)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_createContextualFragment.js':"/**\n * @fileoverview Test for property_createContextualFragment rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_createContextualFragment\", {\n    valid: [\n        { code: \"createContextualFragment\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.createContextualFragment\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_location.js':"/**\n * @fileoverview Test for assign_to_location rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_location\", {\n    valid: [\n        { code: \"foo.location==bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.location=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_href.js':"/**\n * @fileoverview Test for assign_to_href rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_href\", {\n    valid: [\n        { code: \"foo.href==bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.href=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_pathname.js':"/**\n * @fileoverview Test for assign_to_pathname rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_pathname\", {\n    valid: [\n        { code: \"foo.pathname==bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.pathname=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_search.js':"/**\n * @fileoverview Test for assign_to_search rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_search\", {\n    valid: [\n        { code: \"foo.search==bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.search=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_protocol.js':"/**\n * @fileoverview Test for assign_to_protocol rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_protocol\", {\n    valid: [\n        { code: \"foo.protocol==bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.protocol=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_hostname.js':"/**\n * @fileoverview Test for assign_to_hostname rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_hostname\", {\n    valid: [\n        { code: \"foo.hostname==bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.hostname=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_src.js':"/**\n * @fileoverview Test for assign_to_src rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_src\", {\n    valid: [\n        { code: \"src.bar\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"bar.src=foo\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_parseFromString.js':"/**\n * @fileoverview Test for call_parseFromString rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_parseFromString\", {\n    valid: [\n        { code: \"parseFromString()\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.doc = parser.parseFromString(someVar, 'text/html')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_addEventListener.js':"/**\n * @fileoverview Test for call_addEventListener rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_addEventListener\", {\n    valid: [\n        { code: \"addEventListener\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"foo.addEventListener(bar+'bar')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_addEventListener_message.js':"/**\n * @fileoverview Test for call_addEventListener_message rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_addEventListener_message\", {\n    valid: [\n        { code: \" \" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.addEventListener('message', receiveMessage, false)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_onmessage.js':"/**\n * @fileoverview Test for assign_to_onmessage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_onmessage\", {\n    valid: [\n        { code: \"onmessage\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"onmessage=bar\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/identifier_indexedDB.js':"/**\n * @fileoverview Test for identifier_indexedDB rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/identifier_indexedDB\", {\n    valid: [\n        { code: \" 'indexeddb'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"indexedDB.open('MyTestDatabase')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/identifier_localStorage.js':"/**\n * @fileoverview Test for identifier_localStorage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/identifier_localStorage\", {\n    valid: [\n        { code: \" 'localStorage'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"localStorage.setItem('name', 'user1')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/identifier_sessionStorage.js':"/**\n * @fileoverview Test for identifier_sessionStorage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/identifier_sessionStorage\", {\n    valid: [\n        { code: \" 'sessionStorage'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"sessionStorage.setItem('name', 'user1')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_indexedDB.js':"/**\n * @fileoverview Test for property_indexedDB rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_indexedDB\", {\n    valid: [\n        { code: \" 'indexeddb'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.indexedDB.open('MyTestDatabase')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_localStorage.js':"/**\n * @fileoverview Test for property_localStorage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_localStorage\", {\n    valid: [\n        { code: \" 'localStorage'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.localStorage.setItem('name', 'user1')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_sessionStorage.js':"/**\n * @fileoverview Test for property_sessionStorage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_sessionStorage\", {\n    valid: [\n        { code: \" 'sessionStorage'\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.sessionStorage.setItem('name', 'user1')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/new_MozActivity.js':"/**\n * @fileoverview Test for new_MozActivity rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/new_MozActivity\", {\n    valid: [\n        { code: \"MozActivity +1\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"new MozActivity({type:'pick'})\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_mozSetMessageHandler_activity.js':"/**\n * @fileoverview Test for call_mozSetMessageHandler_activity rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_mozSetMessageHandler_activity\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozSetMessageHandler('activity',callback)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_mozSetMessageHandler.js':"/**\n * @fileoverview Test for call_mozSetMessageHandler rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_mozSetMessageHandler\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozSetMessageHandler()\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_getDataStores.js':"/**\n * @fileoverview Test for property_getDataStores rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_getDataStores\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.getDataStores()\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_connect.js':"/**\n * @fileoverview Test for call_connect rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_connect\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"app.connect('bluetoothTransfercomms')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_setMessageHandler_connect.js':"/**\n * @fileoverview Test for call_setMessageHandler_connect rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_setMessageHandler_connect\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \" navigator.setMessageHandler('connect',callback)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozAlarms.js':"/**\n * @fileoverview Test for property_mozAlarms rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozAlarms\", {\n    valid: [\n        { code: \"MozAlarms\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozAlarms\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_open_attention.js':"/**\n * @fileoverview Test for call_open_attention rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_open_attention\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.open('oncall.html', '', 'attention')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_getUserMedia.js':"/**\n * @fileoverview Test for property_getUserMedia rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_getUserMedia\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.getUserMedia({video:true})\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_mozAudioChannelType.js':"/**\n * @fileoverview Test for assign_to_mozAudioChannelType rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_mozAudioChannelType\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"ringtonePlayer.mozAudioChannelType = 'telephony'\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/assign_to_mozAudioChannel.js':"/**\n * @fileoverview Test for assign_to_mozAudioChannel rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/assign_to_mozAudioChannel\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"ringtonePlayer.mozAudioChannel = 'telephony'\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_addEventListener_deviceproximity.js':"/**\n * @fileoverview Test for call_addEventListener_deviceproximity rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_addEventListener_deviceproximity\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.addEventListener('deviceproximity', callback)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozBluetooth.js':"/**\n * @fileoverview Test for property_mozBluetooth rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozBluetooth\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.navigator.mozBluetooth\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_setAttribute_mozbrowser.js':"/**\n * @fileoverview Test for call_setAttribute_mozbrowser rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_setAttribute_mozbrowser\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"iframe.setAttribute('mozbrowser', true)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozCameras.js':"/**\n * @fileoverview Test for property_mozCameras rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozCameras\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"this.mozCameras[0].onShutter = this.onShutter\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_addEventListener_cellbroadcastmsgchanged.js':"/**\n * @fileoverview Test for call_addEventListener_cellbroadcastmsgchanged rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_addEventListener_cellbroadcastmsgchanged\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.addEventListener('cellbroadcastmsgchanged', callback)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozContacts.js':"/**\n * @fileoverview Test for property_mozContacts rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozContacts\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozContacts.oncontactchange = callback\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/new_Notification.js':"/**\n * @fileoverview Test for new_Notification rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/new_Notification\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var notification = new Notification(title, {body: body, icon: iconURL})\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_getDeviceStorage.js':"/**\n * @fileoverview Test for property_getDeviceStorage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_getDeviceStorage\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"apps = navigator.getDeviceStorage('apps')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_getDeviceStorage_apps.js':"/**\n * @fileoverview Test for call_getDeviceStorage_apps rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_getDeviceStorage_apps\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"apps = navigator.getDeviceStorage('apps')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_getDeviceStorage_crashes.js':"/**\n * @fileoverview Test for call_getDeviceStorage_crashes rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_getDeviceStorage_crashes\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"crashes = navigator.getDeviceStorage('crashes')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_getDeviceStorage_music.js':"/**\n * @fileoverview Test for call_getDeviceStorage_music rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_getDeviceStorage_music\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"storage = navigator.getDeviceStorage('music')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_getDeviceStorage_pictures.js':"/**\n * @fileoverview Test for call_getDeviceStorage_pictures rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_getDeviceStorage_pictures\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"this.image = navigator.getDeviceStorage('pictures')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_getDeviceStorage_sdcard.js':"/**\n * @fileoverview Test for call_getDeviceStorage_sdcard rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_getDeviceStorage_sdcard\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var storage = navigator.getDeviceStorage('sdcard')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_getDeviceStorage_videos.js':"/**\n * @fileoverview Test for call_getDeviceStorage_videos rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_getDeviceStorage_videos\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"this.video = navigator.getDeviceStorage('videos')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozDownloadManager.js':"/**\n * @fileoverview Test for property_mozDownloadManager rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozDownloadManager\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozDownloadManager\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_setAttribute_mozapp.js':"/**\n * @fileoverview Test for call_setAttribute_mozapp rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_setAttribute_mozapp\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"browser.setAttribute('mozapp', config.manifestURL)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozFMRadio.js':"/**\n * @fileoverview Test for property_mozFMRadio rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozFMRadio\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozFMRadio\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_geolocation.js':"/**\n * @fileoverview Test for property_geolocation rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_geolocation\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var geolocation = navigator.geolocation\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_addIdleObserver.js':"/**\n * @fileoverview Test for property_addIdleObserver rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_addIdleObserver\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.addIdleObserver\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozInputMethod.js':"/**\n * @fileoverview Test for property_mozInputMethod rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozInputMethod\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.navigator.mozInputMethod\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_hide.js':"/**\n * @fileoverview Test for call_hide rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_hide\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozInputMethod.mgmt.hide()\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozMobileConnections.js':"/**\n * @fileoverview Test for property_mozMobileConnections rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozMobileConnections\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozMobileConnections\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_lastKnownHomeNetwork.js':"/**\n * @fileoverview Test for property_lastKnownHomeNetwork rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_lastKnownHomeNetwork\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"connection.lastKnownHomeNetwork && connection.lastKnownNetwork\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_lastKnownNetwork.js':"/**\n * @fileoverview Test for property_lastKnownNetwork rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_lastKnownNetwork\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"connection.lastKnownHomeNetwork && connection.lastKnownNetwork\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_addEventListener_moznetworkupload.js':"/**\n * @fileoverview Test for call_addEventListener_moznetworkupload rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_addEventListener_moznetworkupload\", {\n    valid: [\n        { code: \"\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.addEventListener('moznetworkupload', uploadHandler)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_addEventListener_moznetworkdownload.js':"/**\n * @fileoverview Test for call_addEventListener_moznetworkdownload rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_addEventListener_moznetworkdownload\", {\n    valid: [\n        { code: \"\" }\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.addEventListener('moznetworkdownload', downloadHandler)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozNetworkStats.js':"/**\n * @fileoverview Test for property_mozNetworkStats rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozNetworkStats\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var networks = navigator.mozNetworkStats.getAvailableNetworks()\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozNfc.js':"/**\n * @fileoverview Test for property_mozNfc rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozNfc\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozNfc\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_open_remote=true.js':"/**\n * @fileoverview Test for call_open_remote=true rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_open_remote=true\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.open(target.dataset.url, '_blank', 'remote=true')\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozPermissionSettings.js':"/**\n * @fileoverview Test for property_mozPermissionSettings rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozPermissionSettings\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var mozPerms = navigator.mozPermissionSettings\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozPhoneNumberService.js':"/**\n * @fileoverview Test for property_mozPhoneNumberService rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozPhoneNumberService\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var service = navigator.mozPhoneNumberService\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozPower.js':"/**\n * @fileoverview Test for property_mozPower rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozPower\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozPower\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozSettings.js':"/**\n * @fileoverview Test for property_mozSettings rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozSettings\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.navigator.mozSettings\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozMobileMessage.js':"/**\n * @fileoverview Test for property_mozMobileMessage rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozMobileMessage\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozMobileMessage\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/new_MozSpeakerManager.js':"/**\n * @fileoverview Test for new_MozSpeakerManager rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/new_MozSpeakerManager\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var mgr = new MozSpeakerManager()\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/object_mozSystem.js':"/**\n * @fileoverview Test for object_mozSystem rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/object_mozSystem\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var xhr = new XMLHttpRequest({mozSystem: true})\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozTCPSocket.js':"/**\n * @fileoverview Test for property_mozTCPSocket rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozTCPSocket\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var TCPSocket = navigator.mozTCPSocket\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozTelephony.js':"/**\n * @fileoverview Test for property_mozTelephony rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozTelephony\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozTelephony.stopTone(this.serviceId)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozTime.js':"/**\n * @fileoverview Test for property_mozTime rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozTime\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"_mozTime = window.navigator.mozTime\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozVoicemail.js':"/**\n * @fileoverview Test for property_mozVoicemail rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozVoicemail\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var voicemail = navigator.mozVoicemail\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/call_mozSetMessageHandler_wappush_received.js':"/**\n * @fileoverview Test for call_mozSetMessageHandler_wappush_received rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/call_mozSetMessageHandler_wappush_received\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"window.navigator.mozSetMessageHandler('wappush-received', wpm_onWapPushReceived)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mgmt.js':"/**\n * @fileoverview Test for property_mgmt rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mgmt\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var req = navigator.mozApps.mgmt.getAll()\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozWifiManager.js':"/**\n * @fileoverview Test for property_mozWifiManager rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozWifiManager\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozWifiManager\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozKeyboard.js':"/**\n * @fileoverview Test for property_mozKeyboard rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozKeyboard\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var keyboard = navigator.mozKeyboard || navigator.mozInputMethod\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozCellBroadcast.js':"/**\n * @fileoverview Test for property_mozCellBroadcast rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozCellBroadcast\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"navigator.mozCellBroadcast.onreceived = this.show.bind(this)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozMobileConnection.js':"/**\n * @fileoverview Test for property_mozMobileConnection rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozMobileConnection\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var conn = window.navigator.mozMobileConnection || window.navigator.mozMobileConnections\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json", '../tests/rules/property_mozNotification.js':"/**\n * @fileoverview Test for property_mozNotification rule\n * @author ScanJS contributors\n * @copyright 2015 Mozilla Corporation. All rights reserved\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nvar eslint = require(\"eslint\"),\n    ESLintTester = require(\"eslint-tester\");\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nvar eslintTester = new ESLintTester(eslint.linter);\neslintTester.addRuleTest(\"lib/rules/property_mozNotification\", {\n    valid: [\n        { code: \"foo()\" } // XXX no need to test for code that does not trigger.\n    ]\n,    // Examples of code that should trigger the rule\n    invalid: [\n\n        {\n            code: \"var notification = navigator.mozNotification.createNotification(title, body, icon)\",\n            errors: [\n                { message: \"can be unsafe\" }\n            ]\n        },\n    ]\n});  // auto-generated from scanjs rules.json"})

var fs = require("fs");
var path = require("path");

for (var k in testandcode) {
  var s = testandcode[k];
  var p = k.split("/");
  var filename = path.basename(p[p.length-1], ".js");
  var u = filename.split("_");
  var what_exactly = "";
  switch(u[0]) {
    case 'call':
      if (u.length == 2) {
        what_exactly = "The function "+u[1];
      } else {
        what_exactly = "The function "+u[1]+" with parameter "+u[2];
      }
      break;
    case 'assign': // assign_to_...
      what_exactly = "Assignment to "+u[2];
      break;
    case 'new':
      what_exactly ="The "+u[1]+" constructor";
      break;
    case 'object':
      what_exactly = "mozSystem";
      break;
    case 'property':
      what_exactly = u[1];
      break;
    case 'identifier':     on
      what_exactly = u[1];
      break;
    default:
      throw new Error(u);
  }

  s = s.replace(/can be unsafe/g, what_exactly+" can be unsafe");
  fs.writeFile(k, s);
}
