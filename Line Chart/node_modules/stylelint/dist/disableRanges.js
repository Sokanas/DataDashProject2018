"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (root, result) {
  result.stylelint = result.stylelint || {};

  var disabledRanges = result.stylelint.disabledRanges = [];

  var withinDisabledRange = false;

  root.walkComments(function (comment) {
    var text = comment.text;

    // Ignore comments that are not relevant commands

    if (text.indexOf(COMMAND_PREFIX) !== 0) {
      return result;
    }

    if (text.indexOf(disableLineCommand) === 0) {
      startDisabledRange(comment, getCommandRules(disableLineCommand, text));
      endDisabledRange(comment);
      return;
    }

    if (text.indexOf(disableCommand) === 0) {
      if (withinDisabledRange) {
        throw comment.error("A new disabled range cannot begin until the previous one has ended", { plugin: "stylelint" });
      }
      withinDisabledRange = true;
      startDisabledRange(comment, getCommandRules(disableCommand, text));
    }

    if (text.indexOf(enableCommand) === 0) {
      if (!withinDisabledRange) {
        throw comment.error("A disabled range cannot end unless it has begun", { plugin: "stylelint" });
      }
      withinDisabledRange = false;
      endDisabledRange(comment);
    }
  });

  return result;

  function startDisabledRange(node, rules) {
    var rangeObj = {
      start: node.source.start.line
    };

    if (rules.length) {
      rangeObj.rules = rules;
    }

    disabledRanges.push(rangeObj);
  }

  function endDisabledRange(node) {
    // Add an `end` prop to the last range
    disabledRanges[disabledRanges.length - 1].end = node.source.end.line;
  }
};

var _lodash = require("lodash");

var COMMAND_PREFIX = "stylelint-";
var disableCommand = COMMAND_PREFIX + "disable";
var enableCommand = COMMAND_PREFIX + "enable";
var disableLineCommand = COMMAND_PREFIX + "disable-line";

// Run it like a plugin ...


function getCommandRules(command, fullText) {
  return (0, _lodash.compact)(fullText.slice(command.length).split(",")).map(function (r) {
    return r.trim();
  });
}