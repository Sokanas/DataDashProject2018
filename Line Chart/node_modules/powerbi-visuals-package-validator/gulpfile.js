/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved.
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

"use strict";

var gulp = require('gulp-help')(require('gulp'));
var runSequence = require("run-sequence").use(gulp);
var path = require('path');
var fs = require('fs');
var del = require('del');
var args = require('yargs').argv;
var glob = require("glob");
var json = JSON.parse(fs.readFileSync(path.join(__dirname, '/package.json')));
var gulputil = require('gulp-util');

var unzip = require('gulp-unzip');
var checkTS = require("./tasks/check-ts");
var checkSecurityJS = require("./tasks/check-security-js");
var checkCSS = require("./tasks/check-css");
var checkPackage = require("./tasks/check-package");
var consoleWriter = require("./tasks/console-print");

var TEMP_FOLDER = path.join(__dirname, '/.tmp/');
var package_path = '';

var logger = {
	api: {check: 'Checking Api version', error: [], ok: []},
	js : {check: 'Checking JavaScript security', error: [], ok: [], message: [], warning:[] },
	css: {check: 'Checking CSS', error: [], ok: [], message: [], warning:[]},
	pkg: {check: 'Checking package content',error: [], ok: [], message: [], warning:[]},
	valid: undefined // true or false  if the package valid or invalid
};

gulp.task('validate', 'Validate pbiviz Package [--file PATH] for package file, [--ms] for Microsoft packages', function() {
	runSequence(
		'clean',
		'unpack',
		'checkSecurityJS',
		'checkCSS',
		'checkPackage',
		'checkValidState',
		'consoleOutput'
	);
});

gulp.task('full-validate', 'Validate pbiviz Package [--file PATH] for package file with TSLint, [--ms] for Microsoft packages', function() {
	runSequence(
		'clean',
		'unpack',
		'checkTS',
		'checkSecurityJS',
		'checkCSS',
		'checkPackage',
		'checkValidState',
		'consoleOutput'
	);
});

gulp.task('pbiviz-tools-validate', 'Validate pbiviz Package generated by pbiviz tools [--file PATH] for package file', function() {
	runSequence(
		'clean',
		'unpack',
		'prepareNewPBIVIZ',
		'checkSecurityJS',
		'checkCSS',
		'checkPackage',
		'checkValidState',
		'consoleOutput'
	);
});

gulp.task('unpack', 'Unpack Package', function() {
	var file_path = args.file || package_path;
	if(file_path) {
		if (path.extname(file_path) !== '.pbiviz') {
			console.error('Specified file is not a Power BI Visual package, please specify ".pbiviz" file');
		} else if(!fs.existsSync(file_path)) {
			console.error('No such file');
		} else {
			package_path = file_path;
			return gulp.src(package_path)
				.pipe(unzip())
				.pipe(gulp.dest(TEMP_FOLDER));
		}
	} else {
		console.error('No --file param');
	}
});

/**
 * create css and js file from fields og *.pbiviz.json resource file of new pbiviz
 * to support validated structure
 */
gulp.task('prepareNewPBIVIZ', false, function() {
	var file = path.join(TEMP_FOLDER, 'resources', '*.pbiviz.json');
	if (glob.sync(file).length) {
		var pbivizJSON = JSON.parse(fs.readFileSync(glob.sync(file)[0], "utf8"));
		fs.writeFileSync(path.join(TEMP_FOLDER, 'resources', 'style.css'), new Buffer(pbivizJSON.content.css));
		fs.writeFileSync(path.join(TEMP_FOLDER, 'resources', 'script.js'), new Buffer(pbivizJSON.content.js));
		logger.api.ok.push({text:'New API version is used'});
	}else{
		logger.api.error.push({text:'Old API version. Please use API since v.1.1'});
	}
});

gulp.task('checkTS', 'TSLint for package content, [--path PATH] for different files', function () {
	var files = !!args.path ? args.path : path.join(TEMP_FOLDER, "**/*.ts");

	return checkTS(files);
});

gulp.task('checkSecurityJS', 'ScanJS for package content, [--path PATH] for different files', function () {
	var files = !!args.path ? args.path : path.join(TEMP_FOLDER, "**/*.js");

	return checkSecurityJS(files, logger);
});

gulp.task('checkCSS', 'StyleLint for package content, [--path PATH] for different files', function () {
	var files = !!args.path ? args.path : path.join(TEMP_FOLDER, "**/*.css");

	return checkCSS(files, logger);
});

gulp.task('checkPackage', 'JSONSchema for package content, [--path PATH] for different files, [--ms] for Microsoft packages', function (cb) {
	var files = !!args.path ? args.path : path.join(TEMP_FOLDER, "package.json");
	var ms = !!args.ms;

	var resultPromise = checkPackage(files, ms, logger);
	if(resultPromise.then){
		resultPromise.then(function(result){
			return cb();
		})
	}else{
		return cb();
	}
});

gulp.task('clean', 'Remove temp package directory ' + TEMP_FOLDER, function() {
	return del.sync([TEMP_FOLDER], {force: true} );
});

gulp.task('checkValidState', 'Checking of package state (valid or invalid). Should be the lastest task in tasks pipline', function() {
	logger.valid = false;
	if(!logger.api.error.length && !logger.js.error.length && !logger.css.error.length && !logger.pkg.error.length){
		logger.valid = true;
	}
});

gulp.task('consoleOutput', 'Print results of checking of the package', function() {
	consoleWriter('empty')
	consoleWriter('empty')
	consoleWriter('warning', 'Run validator v.', json.version)
	consoleWriter('empty')

	for(var checkName in logger){
		var checkPoint = logger[checkName];
		if(checkPoint.error){
			consoleWriter( (checkPoint.error.length?'error':'ok'), checkPoint.check, (checkPoint.error.length? checkPoint.error.length+' errors were found':'done succeed'));
			if(checkPoint.error.length){
				checkPoint.error.forEach((error)=>{
					var result = [];
					for(var key in error){
						var val = error[key];
						result.push(key+' '+val);
					}
					consoleWriter('error','....', result.join(' --> '));
				})
			}
		}
	}
	consoleWriter('empty')
	consoleWriter( (logger.valid?'ok':'error'), 'Check complete', (logger.valid?'Valid PBIVIZ packacge':'Invalid PBIVIZ package'));
	consoleWriter('empty')
	consoleWriter('empty')
});


gulp.task('default', ['clean', 'validate']);


/**
 * For external require module usage. Example:
 * ------------------------------------------------------------
 * let validator = require('gulp-powerbi-package-validator');
 * let packagePath = c:/path/to/your/package.pbiviz
 *
 * validator.run(packagePath, (checkingLogsJSON) =>{ 
 *     console.log('Checking results', checkingLogsJSON); 
 * });
 * ------------------------------------------------------------
 */
var callback_out = function(){};

gulp.task('returnResult', 'return asinc result of checking package', function(cb) {
	if(!logger.api.error.length && !logger.js.error.length && !logger.css.error.length && !logger.pkg.error.length)
		logger.valid = true;
	callback_out(logger);
	return cb()
});

module.exports = {
	run: function(path, callback){
		package_path = path;
		callback_out = callback;
		runSequence(
			'clean'
			,'unpack'
			,'prepareNewPBIVIZ'
			,'checkSecurityJS'
			,'checkCSS'
			,'checkPackage'
			,'checkValidState'
			,'returnResult'
		);
	},
	ver: json.version,
}